#!/usr/bin/env ruby
require 'fileutils'
require 'open-uri'

# Check if the --update option is passed
update_mode = ARGV.include?("--update")

# Create the build directory
FileUtils.mkdir_p("build")

#########################
#  OPAL SECTION
#########################
puts "== Compiling with Opal =="

# If update_mode is enabled, force a full update of the opal gem
if update_mode
  puts "Forcing full update of the opal gem..."
  system("gem update opal --no-document")
else
  puts "Opal gem update skipped (option --update not used)."
end

# Check if opal is installed
unless system("command -v opal > /dev/null 2>&1")
  puts "Opal is not installed. Installing now..."
  system("gem install opal") || abort("Error: Failed to install opal.")
end

# For opal.min.js, delete the existing file if update_mode is enabled
opal_min_js_path = "build/opal.min.js"
if update_mode && File.exist?(opal_min_js_path)
  puts "Option --update enabled, deleting existing file #{opal_min_js_path}..."
  File.delete(opal_min_js_path)
end

# Download opal.min.js if it does not exist
unless File.exist?(opal_min_js_path)
  opal_url = "https://cdn.opalrb.com/opal/1.7.2/opal.min.js"
  puts "Downloading opal.min.js from #{opal_url}..."
  URI.open(opal_url) do |remote|
    File.open(opal_min_js_path, "wb") { |file| file.write(remote.read) }
  end
  puts "Downloaded opal.min.js to #{opal_min_js_path}"
else
  puts "opal.min.js already exists, skipping download."
end

# Compile the Ruby application with Opal including opal-parser (for inline Ruby code)
puts "Compiling Ruby application with Opal..."
opal_compile_cmd = "opal -r opal-parser --compile app/index.rb > build/application.js"
system(opal_compile_cmd)
if $?.exitstatus == 0
  puts "Opal compilation successful! build/application.js created."
else
  abort("Error during Opal compilation.")
end

#########################
#  WASM SECTION
#########################
puts "\n== Compiling with Ruby WASM =="

# Define the download URLs
RUBY_WASM_URL = "https://github.com/ruby/ruby.wasm/releases/latest/download/ruby-3.4-wasm32-unknown-wasip1-full.tar.gz"
RUBY_WASI_TGZ_URL = "https://github.com/ruby/ruby.wasm/releases/download/2.7.1/ruby-3.4-wasm-wasi-2.7.1.tgz"

# For Ruby WASM, delete the existing file if update_mode is enabled
ruby_wasm_dest = "build/ruby.wasm"
if update_mode && File.exist?(ruby_wasm_dest)
  puts "Option --update enabled, deleting existing file #{ruby_wasm_dest}..."
  File.delete(ruby_wasm_dest)
end

# Download Ruby WASM if it does not exist
unless File.exist?(ruby_wasm_dest)
  puts "Downloading Ruby WASM..."
  wasm_archive = "build/ruby-3.4-wasm32-unknown-wasip1-full.tar.gz"
  URI.open(RUBY_WASM_URL) do |remote|
    File.open(wasm_archive, "wb") { |file| file.write(remote.read) }
  end
  puts "Extracting #{wasm_archive}..."
  system("tar xfz #{wasm_archive} -C build")
  FileUtils.mv("build/ruby-3.4-wasm32-unknown-wasip1-full/usr/local/bin/ruby", ruby_wasm_dest)
  puts "Ruby WASM downloaded and moved to #{ruby_wasm_dest}"
else
  puts "Ruby WASM file already exists, skipping download."
end

# For ruby-3.4-wasm-wasi-2.7.1.tgz, delete the existing file if update_mode is enabled
wasi_tgz = "build/ruby-3.4-wasm-wasi-2.7.1.tgz"
if update_mode && File.exist?(wasi_tgz)
  puts "Option --update enabled, deleting existing file #{wasi_tgz}..."
  File.delete(wasi_tgz)
end

# Download ruby-3.4-wasm-wasi-2.7.1.tgz if it does not exist
unless File.exist?(wasi_tgz)
  puts "Downloading ruby-3.4-wasm-wasi-2.7.1.tgz..."
  URI.open(RUBY_WASI_TGZ_URL) do |remote|
    File.open(wasi_tgz, "wb") { |file| file.write(remote.read) }
  end
  puts "Extracting #{wasi_tgz}..."
  system("tar xfz #{wasi_tgz} -C build")
  puts "ruby-3.4-wasm-wasi-2.7.1.tgz downloaded and extracted in the build directory."
else
  puts "ruby-3.4-wasm-wasi-2.7.1.tgz already exists, skipping download."
end

# Compile the application to WASM
puts "Compiling application to app.wasm..."
wasm_compile_cmd = "rbwasm pack build/ruby.wasm --dir ./app::/app --dir ./build/ruby-3.4-wasm32-unknown-wasip1-full/usr::/usr -o build/app.wasm"
system(wasm_compile_cmd)
if $?.exitstatus == 0
  puts "Ruby application compiled to build/app.wasm"
else
  abort("Error during WASM compilation.")
end

# Modify the JavaScript file generated by WASM compilation
js_file_path = "build/package/dist/browser.script.iife.js"
if File.exist?(js_file_path)
  puts "Modifying JavaScript file #{js_file_path}..."
  content = File.read(js_file_path)
  new_content = content.gsub(
    /const response = fetch\(`https:\/\/cdn\.jsdelivr\.net\/npm\/\$\{pkg\.name\}@\$\{pkg\.version\}\/dist\/ruby\+stdlib\.wasm`\);/,
    'const response = fetch(`./build/package/dist/ruby+stdlib.wasm`);'
  )
  File.write(js_file_path, new_content)
  puts "JavaScript file modified successfully!"
else
  puts "Warning: JavaScript file #{js_file_path} not found. Check if WASM compilation generated the expected files."
end

#########################
#  USAGE INSTRUCTIONS
#########################
# puts "\n== Usage Instructions =="
# puts "To use the Opal version: open index_opal.html in your browser."
# puts "To use the WASM version: open index_wasm.html in your browser."